#!/bin/bash

listTest=( @PDM_LIST_TEST@ )
listNRank=( @PDM_LIST_NRANK@ )
listDir=( @PDM_LIST_TEST_DIR@ )

RED='\033[0;31m'
NC='\033[0m' # No Color
GREEN='\033[0;32m'
PURPLE='\033[0;35m'

Help()
{
  echo "Run a pdm test case. (without \"-t\" option, run all tests with default rank number)"
  echo
  echo "Syntax: pdm_run [-m|mpiexec|no_log_vtk|h|n_avail_rank] -n <number of ranks> -t <test name and its options>"
  echo "options:"
  echo "-m                                  Make test before run"
  echo "-h                                  Print this Help"
  echo "-mpiexec                            Run with mpiexec command (default : mpirun)"
  echo "-srun                               Run with mpiexec command (default : mpirun)"
  echo "-n <number of ranks>                Number of ranks (default : 2)"
  echo "-no_log_vtk                         Exit on error if test writes some log and vtk files"
  echo "-n_avail_rank                       Number of available ranks for script"
  echo "-n_avail_rank                       Number of available ranks for script"
  echo "-t <\"test name and its options\">  Test name and its options "
  echo "-output-junit  <file>               Export to Format XML JUnit"
  echo
}

Dump_mem()
{
  cd ${TestPath1}_d 
  max="-1"
  min="10000000"
  
  minRank=-1
  maxRank=-1
  rank=0

  if [ ${IsIntelMPI} -gt 0 ] || [ ${IsSrunMPI} -gt 0 ]
  then
    listErrFile=$(ls $1.*)
  else
    listErrFile=$(find $2 -name stderr)
  fi

  for file in ${listErrFile}
  do
    v=$(grep -m 1 "Maximum Resident Memory" $file | awk '{print $5}')
    maxRank=$(echo "if($v>$max) $rank else $maxRank" | bc)
    minRank=$(echo "if($v<$min) $rank else $minRank" | bc)
    max=$(echo "if($v>$max) $v else $max" | bc)
    min=$(echo "if($v<$min) $v else $min" | bc)
    rank=$((rank+1))
  done
  
  maxM=$(echo "scale=2; $max/1000" | bc)
  minM=$(echo "scale=2; $min/1000" | bc)
  
  echo "    Maximum of Maximum Resident Memory: ${maxM} Mb on rank ${maxRank}"
  echo "    Minimum of Maximum Resident Memory: ${minM} Mb on rank ${minRank}"
  cd - 1>/dev/null 2>/dev/null
}

Dump_time()
{
  cd ${TestPath1}_d 
  max="-1"

  maxRank=-1
  rank=0
  
  if [ ${IsIntelMPI} -gt 0 ] || [ ${IsSrunMPI} -gt 0 ]
  then
    listErrFile=$(ls $1.*)
  else
    listErrFile=$(find $2 -name stderr)
  fi

  for file in ${listErrFile}
  do
    v=$(grep -m 1 "Real time :" $file | awk '{print $4}')
    max=$(echo "if($v>$max) $v else $max" | bc)
    rank=$((rank+1))
  done
  
  echo $max
  cd - 1>/dev/null 2>/dev/null
}

Dump_nb_log_vtk_file()
{
  cd ${TestPath1}_d 
  val_vtk=`ls -l *.vtk  2> /dev/null | wc -l`;
  val_log=`ls -l *.log  2> /dev/null | wc -l`;

  if [ $val_vtk -gt 0 ] || [ $val_log -gt 0 ]
  then
    ((ivtk=ivtk+1))
    testWithOutput=(${testWithOutput[@]} "$i1")
    echo "    Number of vtk files = ${val_vtk}"
    echo "    Number of log files = ${val_log}"
  fi
  cd - 1>/dev/null 2>/dev/null
}

Wait_job()
{
  i1=$Indextest
  ((j1=Indextest+1))
  for pid in "${pids[@]}"
  do
    Testoutput=0
    TestPath1=$(echo ${listComputedTest[$i1]} | awk '{print $1}')
    TestName1=$(basename ${TestPath1})
    TestDir1=$(dirname ${TestPath1})

    OutputFile1=$(echo ${TestName1}${postOutput})
    ErrFile1=$(echo ${TestName1}${postErr})

    printf  "${PURPLE}[%3.3d/%3.3d] - %s: Finalize${NC}\n" ${j1} ${nTest} ${TestName1} 

    wait $pid

    if [ "$?" -ne "0" ]
    then
      Testoutput=1
      printf  "${PURPLE}[%3.3d/%3.3d] - %s: ${RED}Failed${NC}\n" ${j1} ${nTest} ${TestName1}
      failedTest=(${failedTest[@]} "$i1")
 
      ((ifailed=ifailed+1))
    else        

      #
      # Compute elapsed time
      
      elapsed=$(Dump_time $ErrFile1 $OutputFile1)

      #
      # Check Maximum Resident memory

      Dump_mem $ErrFile1 $OutputFile1

      #
      # Check *vtk and *log file
      
      Dump_nb_log_vtk_file ${TestName1}
    
      if [ "${ForbidVtk}" -eq "1" ]
      then
        if [ ${val_vtk} -gt 0 ] || [ ${val_log} -gt 0 ]
        then
          printf  "${PURPLE}[%3.3d/%3.3d] - %s: ${RED}Failed due to *vtk or *log files${NC}\n" ${j1} ${nTest} ${TestName1} 
          Testoutput=1
        else
          printf  "${PURPLE}[%3.3d/%3.3d] - %s: ${GREEN}Passed${NC} - %s s\n" ${j1} ${nTest} ${TestName1} ${elapsed} 
        fi
      else
        printf  "${PURPLE}[%3.3d/%3.3d] - %s: ${GREEN}Passed${NC} - %s s\n" ${j1} ${nTest} ${TestName1} ${elapsed} 
      fi

    fi
    ((i1=i1+1))
    ((j1=j1+1))
    scriptOutput=$(echo "if($Testoutput>$scriptOutput) $Testoutput else $scriptOutput" | bc)
  done

  IndexRank=0  
  pids=() 

}


start=$(($(date +%s%N)/1000000))

# Get the options 

ExeMPI="mpirun"
Testoutput=0
ForbidVtk=0
NrankUser=0
runMake=0
Test=""
IsSrunMPI=0
NAvailRank=24
failedTest=()
testWithOutput=()
exportjunit=1
JUnitFile=""

while [ -n "$1" ]
do
case "$1" in
    -m) runMake=1;;
    -n) NrankUser="$2"
        shift;;
    -t) Test="$2"
        shift;;
    -mpiexec) ExeMPI="mpiexec";;
    -srun) ExeMPI="srun"
              IsSrunMPI=1;;
    -no_log_vtk) ForbidVtk=1;;
    -n_avail_rank) NAvailRank="$2"
        shift;;
    -exportjunit) JUnitFile="$2"
        shift;;
    -h) Help
        exit;;
    *) echo "Error : $1 is not an option"
        exit;;
esac
shift
done

if [[ "${Test}" == "" ]]
then
  listComputedTest=( "${listTest[@]}" )
  listComputedNRank=( "${listNRank[@]}" )
else
  testFound=0
  TestPath=$(echo $Test | awk '{print $1}')
  TestName1=$(basename ${TestPath})
  TestDir=$(dirname ${TestPath})
  i=0
  for value in "${listTest[@]}" ; do    #print the new array
    valuePath=$(echo $value | awk '{print $1}')
    valueName1=$(basename ${valuePath})
    valueDir=$(dirname ${valuePath})
    if [[ ${valueName1} =~ ^${TestName1}$ ]]
    then
      listComputedTest=( "${TestName1}" ) 
      if [[ "${Nrank}" == "0" ]]
      then
        listComputedNRank=( "${Nrank}" )
      else  
        listComputedNRank=( "${listNRank[${i}]}" )
      fi
      testFound=1;
      break;
    fi
    ((i=i+1))
  done

  if [ ${testFound} -eq 0 ]
  then  
    echo -e "${RED}Error${NC}: '${TestName1}' is not a test' "
    exit 1
  fi
fi 

IsIntelMPI=$(echo $(${ExeMPI} --version) | grep -c Intel)

i=0
ifailed=0
ivtk=0
nTest=${#listComputedTest[@]}

scriptOutput=0
pids=()

IndexRank=0
Indextest=0
cptRank=0

for x in "${listComputedTest[@]}"
do
  isPythonTest=0

  if [[ "${Test}" == "" ]]
  then
    if [ -f "${x}.py" ]; then
      isPythonTest=1
    fi
    TestPath=$(echo $x | awk '{print $1}')
    TestName=$(basename ${TestPath})
    TestDir=$(dirname ${TestPath})
    TestOption=""
    Nrank=${listComputedNRank[$i]}
  else
    if [ -f "${Test}.py" ]; then
      isPythonTest=1
    fi
    TestPath=$(echo $Test | awk '{print $1}')
    TestName=$(basename ${TestPath})
    TestDir=$(dirname ${TestPath})
    TestOption=$(echo $Test |  awk '!($1="")')
    if [[ "${NrankUser}" == "0" ]]
    then    
      Nrank=${listComputedNRank[${i}]}
    else  
      Nrank=${NrankUser}
    fi  
  fi 

  #echo "TestName ${TestName}"
  #echo "TestOption ${TestOption}"
  #echo "TestDir ${TestDir}"
  #echo "Nrank ${Nrank}"  

  postOutput="_o"
  postErr="_e"
  
  OutputFile=$(echo ${TestName}${postOutput})
  ErrFile=$(echo ${TestName}${postErr})
  
  if [ ${runMake} -eq 1 ]
  then
    if [[ "${Test}" != "" ]]
    then  
      echo -e "${PURPLE}${TestName}: Compile${NC}"
      make ${TestName}
      if [ "$?" -ne "0" ]
      then
        echo -e "${PURPLE}${TestName}: Compile${NC} - ${RED}Failed${NC}"
        exit 1
      fi
      echo -e "${PURPLE}${TestName}: Compile${NC} - ${GREEN}Passed${NC}"
    else
      if [ $i -eq 0 ]
      then
        echo -e "${PURPLE}Compile${NC}"
        make
        if [ "$?" -ne "0" ]
        then
          echo -e "${PURPLE}Compile${NC} - ${RED}Failed${NC}"
          exit 1
        fi
        echo -e "${PURPLE}Compile${NC} - ${GREEN}Passed${NC}"     
      fi  
    fi 
  fi
  
  ((j=i+1))
  printf  "${PURPLE}[%3.3d/%3.3d] - %s: Start${NC}\n" ${j} ${nTest} ${TestName} 

  #
  # Cleanup
  
  rm -rf *.vtk *.log core.* *_ens ${OutputFile}* ${ErrFile}* 
  
  #
  # Run test

  Testoutput=0

  if [ ${IsSrunMPI} -gt 0 ]
  then
    # mkdir -p ${TestName}_d
    # cd ${TestName}_d 
    mkdir -p ${x}_d
    cd ${x}_d
    if [ $isPythonTest -gt 0  ]
    then
      ${ExeMPI}  --output=$OutputFile.%t --error=$ErrFile.%t -N 1 -n ${Nrank} --exact /usr/bin/time  -f "Maximum Resident Memory : %M Kb\nReal time : %e s" @PROJECT_BINARY_DIR@/pdm_launch_python ../${TestName}.py ${TestOption} 2>/dev/null &
    else
      ${ExeMPI}  --output=$OutputFile.%t --error=$ErrFile.%t -N 1 -n ${Nrank} --exact /usr/bin/time  -f "Maximum Resident Memory : %M Kb\nReal time : %e s" @PROJECT_BINARY_DIR@/pdm_launch ../${TestName} ${TestOption} 2>/dev/null &
    fi
    pids=(${pids[@]} "$!")
    cd - 1>/dev/null 2>/dev/null
  else  

    if [ $Nrank -gt $NAvailRank ]
    then
      echo "Error PDM_run : Number of requested ranks is greater then the number of available ranks"
      exit 1
    fi  

    ((cptRank=IndexRank+Nrank)) 
    
    if [ $cptRank -gt $NAvailRank ]
    then
      Wait_job
      Indextest=$i
    fi

    # mkdir -p ${TestName}_d
    # cd ${TestName}_d  
    mkdir -p ${x}_d
    cd ${x}_d
    if [ ${IsIntelMPI} -gt 0 ]
    then
      if [ $isPythonTest -gt 0  ]
      then
        @PDM_RUN_LSAN@ @PDM_RUN_PYTHONPATH@ ${ExeMPI} -genv @PDM_RUN_PRELOAD@ -outfile-pattern $OutputFile.%r -errfile-pattern $ErrFile.%r -n $Nrank /usr/bin/time  -f "Maximum Resident Memory : %M Kb\nReal time : %e s" python ../${TestName}.py ${TestOption} 2>/dev/null &
      else
        @PDM_RUN_LSAN@ ${ExeMPI} -genv @PDM_RUN_PRELOAD@ -outfile-pattern $OutputFile.%r -errfile-pattern $ErrFile.%r  -n $Nrank /usr/bin/time  -f "Maximum Resident Memory : %M Kb\nReal time : %e s" ../${TestName} ${TestOption} 2>/dev/null &
      fi
      pids=(${pids[@]} "$!")
    else
      echo -e "${RED}Error${NC}: OpenMPI is not available for pdm_run script"
      echo -e "${PURPLE}${TestName}: ${RED}Failed${NC}"
      exit 1
      @PDM_RUN_LSAN@ @PDM_RUN_PYTHONPATH@ ${ExeMPI} -genv @PDM_RUN_PRELOAD@ -output-filename $OutputFile -n $Nrank /usr/bin/time  -f "Maximum Resident Memory : %M Kb\nReal time : %e s" ../${TestName} ${TestOption} 2>/dev/null
      pids=(${pids[@]} "$!")
    fi
    cd - 1>/dev/null 2>/dev/null
    ((IndexRank=IndexRank+Nrank)) 
  
  fi  

  ((i=i+1))
done

if [ ${IsSrunMPI} -gt 0 ]
then
  Indextest=0
  ifailed=0 
fi

Wait_job

printf  "\n      ${PURPLE}%3.3d tests failed out of %3.3d : \n${NC}" ${ifailed} ${nTest} 
for i in "${failedTest[@]}"
do
  TestPath=$(echo ${listComputedTest[$i]} | awk '{print $1}')
  TestName=$(basename ${TestPath})
  TestDir=$(dirname ${TestPath})
  printf "          - ${RED}%s\n${NC}" $TestName  
done

printf  "\n      ${PURPLE}%3.3d tests produce vtk or log files out of %3.3d : \n${NC}" ${ivtk} ${nTest} 
for i in "${testWithOutput[@]}"
do
  TestPath=$(echo ${listComputedTest[$i]} | awk '{print $1}')
  TestName=$(basename ${TestPath})
  TestDir=$(dirname ${TestPath})
  printf "          - ${RED}%s\n${NC}" $TestName  
done

end=$(($(date +%s%N)/1000000))
elapsed=$(echo "scale=2; ($end-$start)/1000" | bc)
echo
echo "    elapsed pdm_run = ${elapsed} s"

