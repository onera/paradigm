# Declare stages
stages:
  - init
  - build
  - test

# Default variables and parameters
variables:
  GIT_STRATEGY: none # don't do anything by default
  SCHEDULER_PARAMETERS:  "-M rhel8 --qos=el8_gbe --ntasks=24 --time=00:30:00"
  # CI_DEBUG_TRACE: "true" #Uncomment to debug CI
default:
  tags: #All jobs uses jamacar-slurm executor
    - slurm


init_repo:
  variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: none
    SCHEDULER_PARAMETERS:  "-M rhel8 --qos=el8_gbe --ntasks=1 --time=00:10:00"
  stage: init
  script: # explicitly load modules one by one, so that if one fails, it will be easy to identify
    - echo "Clone directory $PWD"
    - echo "CUSTOM_CI_DIR=$PWD" >> build.env
    - git submodule update --init extensions/paradigma
  artifacts:
    reports:
      dotenv: build.env

build:
  parallel:
    matrix:
        - COMPILER: ["gcc@10", "gcc@12"]
          MPI_LIB: ["impi"] #, "openmpi"]
  variables:
    MATRIX_KEY: _${COMPILER}_${MPI_LIB}
  stage: build
  before_script:
    - echo ">> before_script"
    - unset _LMFILES_
    - unset LOADEDMODULES
    - module -s purge
    - echo "compilo = $COMPILER"
    - source /scratchm/sonics/dist/spiro_el8.sh --compiler=$COMPILER --mpi=$MPI_LIB
  script:
    - echo "Runner directory is $PWD; move to working directory $CUSTOM_CI_DIR"
    - cd $CUSTOM_CI_DIR
    - mkdir -p build$MATRIX_KEY && cd build$MATRIX_KEY
    - which gcc
    - cmake -DCMAKE_BUILD_TYPE=Sanitize -DPDM_ENABLE_STATIC=OFF -DPDM_ENABLE_SHARED=ON -DPDM_ENABLE_Fortran=OFF -DPDM_ENABLE_EXTENSION_PDMA=ON  ../
    - make -j

unit_test:
  parallel:
    matrix:
        - COMPILER: ["gcc@10", "gcc@12"]
          MPI_LIB: ["impi"] #, "openmpi"]
  variables:
    MATRIX_KEY: _${COMPILER}_${MPI_LIB}
  stage: test
  before_script:
    - unset _LMFILES_
    - unset LOADEDMODULES
    - module -s purge
    - source /scratchm/sonics/dist/spiro_el8.sh --compiler=$COMPILER --mpi=$MPI_LIB
  script:
    - echo "Runner directory is $PWD; move to working directory $CUSTOM_CI_DIR"
    - cd $CUSTOM_CI_DIR/build$MATRIX_KEY
      # Artefacts are searched in CI_PROJECT_DIR, but job was executed in CUSTOM_CI_DIR
    - ctest -V --output-junit $CI_PROJECT_DIR/paradigm_ctest$MATRIX_KEY.xml
      # Go back to runner dir for artifact modification
  after_script:
    - echo $PWD
    - cd $CI_PROJECT_DIR
    - sed -i '/testsuite name/c\<testsuite name="'"$MATRIX_KEY"'"' paradigm_ctest$MATRIX_KEY.xml
    - sed -i 's/" classname/_'"$MATRIX_KEY"'" classname/' paradigm_ctest$MATRIX_KEY.xml
  artifacts:
    when: always
    reports:
      junit: paradigm_ctest$MATRIX_KEY.xml

non_regression:
  variables:
    COMPILER: "gcc@10"
    MPI_LIB: "impi"
    MATRIX_KEY: _${COMPILER}_${MPI_LIB}
  stage: test
  before_script:
    - unset _LMFILES_
    - unset LOADEDMODULES
    - module -s purge
    - source /scratchm/sonics/dist/spiro_el8.sh --compiler=$COMPILER --mpi=$MPI_LIB
  script:
    - echo "Runner directory is $PWD; move to working directory $CUSTOM_CI_DIR"
    - cd $CUSTOM_CI_DIR/build$MATRIX_KEY
    - mkdir -p reports
    - ./script/prepare_ci/run_top_test_base.sh --log_file_name reports/output_alltest_pdm --matrix_key ${MATRIX_KEY} --output_xml $CI_PROJECT_DIR/paradigm_alltest$MATRIX_KEY.xml
  artifacts:
   when: always
   reports:
     junit: paradigm_alltest$MATRIX_KEY.xml

# TODO :
#  - Rajouter des regles pour faire plus de compilo quand on merge sur dev : impi + clang + pgi par exemple
# rules:
#   - if: $CI_COMMIT_BRANCH == "dev"
# Rajouter int/long
# Tester si paradigm se compiler seul (sans paradigma)
